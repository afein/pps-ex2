/***** Tiled LU decomposition*****/

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#include "common.h"

void mm(double ** a1,int x_1,int y_1, double ** a2, int x_2, int y_2 , double ** res, int x_3, int y_3, double ** tmp_res, int M, int N, int P, int sign);
cilk void mm_lower(double ** a1,int x_1,int y_1, double ** a2, int x_2, int y_2 , double ** res, int x_3, int y_3, int M, int N, int P);
cilk void mm_upper(double ** a1,int x_1,int y_1, double ** a2, int x_2, int y_2 , double ** res, int x_3, int y_3, int M, int N, int P);
cilk void rectrtri_lower(double ** a, int x_s,int y_s, int N, int M, double ** tmp_res);
cilk void rectrtri_upper(double ** a, int x_s, int y_s, int N, int M, double ** tmp_res);
double ** allocate(int X, int Y);
int min(int x, int y)
{
    return x<y?x:y;
}
cilk double ** get_inv_l(double ** a, int xs, int ys, int X, int Y);
cilk double ** get_inv_u(double **a, int xs, int ys, int X, int Y);
cilk void lu(double ** a, int num_blocks, int B);
void lu_kernel(double ** a, int xs, int ys, int X, int Y);
void print(double ** a, int N);
cilk void mm_update(double ** a1, int x_1, int y_1, double ** a2, int x_2, int y_2, double ** res, int x_3, int y_3, int M, int N, int P);
double ** up_res, ** low_res;

cilk void for_spawn_updates(int k, int num_blocks, int initk, int initnum_blocks, double **a, int B);
cilk void for_spawn_mm(int i, int stop, int k, int num_blocks, double **a, double **l_inv, double **u_inv, int B);

cilk int main(int argc, char *argv[])
{
    double ** A;
    int N,B,num_blocks;
    struct timeval ts, tf;
    double time;

    Matrix *mat;
    tiled_usage(argc, argv);

    mat = get_matrix(argv[1], 0, CONTINUOUS);
    N = mat->N;
    A = appoint_2D(mat->A, N, N);
    sscanf(argv[3],"%d",&B);

    if (N%B!=0 || B==1) {
        printf("\t Grid is not a multiple of Block size \n");
        exit(0);
    }

    num_blocks=N/B;

    low_res=allocate(B,(num_blocks-1)*B);
    up_res=allocate((num_blocks-1)*B,B);

    gettimeofday(&ts,NULL);

    spawn lu(A,num_blocks,B);
    sync;

    gettimeofday(&tf,NULL);
    time=(tf.tv_sec-ts.tv_sec)+(tf.tv_usec-ts.tv_usec)*0.000001;
    printf("Tiled\t%d\t%lf\tBlock Size: %d\n", N,time,B);
//	print(A,N);
    upper_triangularize(N, A);
    print_matrix_2d_to_file(argv[2], N, N, *A);
    return 0;
}

/**** Tiled LU decomposition *****/
cilk void lu(double **a, int num_blocks, int B)
{
    int k;
    double t;
    double ** l_inv, ** u_inv;
    time_struct ts_lu;
    time_struct ts_inv;
    time_struct ts_decom;
    time_struct ts_mm;

    time_struct_init(&ts_lu);
    time_struct_init(&ts_inv);
    time_struct_init(&ts_decom);
    time_struct_init(&ts_mm);

    for (k=0; k<num_blocks-1; k++) {

        /****Compute LU decomposition on upper left tile*****/
        time_struct_set_timestamp(&ts_lu);
        lu_kernel(a,k*B,k*B,B,B);
        time_struct_add_timestamp(&ts_lu);


        /****Compute inverted L and U matrices of upper left tile*****/
        time_struct_set_timestamp(&ts_inv);
        l_inv = spawn get_inv_l(a,k*B,k*B,B,B);
        u_inv = spawn get_inv_u(a,k*B,k*B,B,B);
        sync;
        time_struct_add_timestamp(&ts_inv);


        /*****Compute LU decomposition on upper horizontal frame and left vertical frame*****/
        time_struct_set_timestamp(&ts_decom);
        spawn for_spawn_mm(k+1, num_blocks-1, k, num_blocks, a, l_inv, u_inv, B);
        sync;
        time_struct_add_timestamp(&ts_decom);
        

        /*****Update trailing blocks*****/

        time_struct_set_timestamp(&ts_mm);
        spawn for_spawn_updates(k+1, num_blocks-1, k, num_blocks, a, B);
        sync;
        time_struct_add_timestamp(&ts_mm);

    }

    t = get_seconds(&ts_lu);
    fprintf(stderr, "lu_kernel time: %lf\n", t);
    t = get_seconds(&ts_inv);
    fprintf(stderr, "inversions time: %lf\n", t);
    t = get_seconds(&ts_decom);
    fprintf(stderr, "LU decomp time: %lf\n", t);
    t = get_seconds(&ts_mm);
    fprintf(stderr, "mm updates time: %lf\n\n", t);

    /***** Compute LU on final diagonal block *****/
    lu_kernel(a,(num_blocks-1)*B,(num_blocks-1)*B,B,B);

}
cilk void for_spawn_mm(int i, int stop, int k, int num_blocks, double **a, double **l_inv, double **u_inv, int B)
{
    int current_range;

    current_range = stop - i;
    if(current_range > 0) {
        spawn for_spawn_mm(i, i + current_range / 2, k, num_blocks, a, l_inv, u_inv, B);
        spawn for_spawn_mm(i + current_range / 2 + 1, stop, k, num_blocks, a, l_inv, u_inv, B);
    }
    else if (current_range == 0) {
        spawn mm_lower(l_inv,0,0,a,k*B,i*B,a,k*B,i*B,B,B,B);
        spawn mm_upper(a,i*B,k*B,u_inv,0,0,a,i*B,k*B,B,B,B);
    }
}

cilk void for_spawn_inner_updates(int start, int stop, int k, int num_blocks, int i, double **a, int B)
{
    int current_range;

    current_range = stop - start;
    if(current_range > 0) {
        spawn for_spawn_inner_updates(start, start + current_range / 2, k, num_blocks, i, a, B);
        spawn for_spawn_inner_updates(start + current_range / 2 + 1, stop, k, num_blocks, i, a, B);
    }
    else if (current_range == 0) {
        spawn mm_update(a,i*B,k*B,a,k*B,start*B,a,i*B,start*B,B,B,B);
    }
}

cilk void for_spawn_updates(int i, int stop, int k, int num_blocks, double **a, int B)
{
    int current_range;

    current_range = stop - i;
    if(current_range > 0) {
        spawn for_spawn_updates(i, i + current_range / 2, k, num_blocks, a, B);
        spawn for_spawn_updates(i + current_range / 2 + 1, stop, k, num_blocks, a, B);
    }
    else if (current_range == 0) {
        spawn for_spawn_inner_updates(k+1, num_blocks-1, k, num_blocks, i, a, B);
    }
}


/***** Baseline LU Kernel *****/
void lu_kernel(double ** a, int xs,int ys, int X, int Y)
{
    int i,k;
    double l;
    int j;
    for (k=0; k<min(X,Y); k++) {
        for (i=k+1; i<X; i++) {
            l=a[i+xs][k+ys]=a[i+xs][k+ys]/a[k+xs][k+ys];
            for (j=k+1; j<Y; j++) {
                a[i+xs][j+ys]-=l*a[k+xs][j+ys];
            }
        }
    }
}

/***** Computes the inverted L^(-1) matrix of upper diagonal block using rectrtri_lower() *****/
cilk double ** get_inv_l(double ** a, int xs, int ys, int X, int Y)
{
    double ** l_inv=allocate(X,Y);
    double ** tmp_res=allocate(X,Y);
    int i,j;
    for (i=0; i<X; i++) {
        for (j=0; j<Y; j++) {
            if (i>j)
                l_inv[i][j]=a[i+xs][j+ys];
            else if (i==j)
                l_inv[i][j]=1.0;
            else l_inv[i][j]=0;
        }
    }
    spawn rectrtri_lower(l_inv,0,0,X,Y,tmp_res);
    sync;
    free(tmp_res);
    return l_inv;

}

/***** Computer the inverted U^(-1) matrix of upper diagonal block using rectrtri_upper() *****/
cilk double ** get_inv_u(double **a, int xs, int ys, int X, int Y)
{
    double ** u_inv=allocate(X,Y);
    double ** tmp_res=allocate(X,Y);
    int i,j;
    for (i=0; i<X; i++)
        for (j=0; j<Y; j++) {
            if (i<=j)
                u_inv[i][j]=a[i+xs][j+ys];
            else u_inv[i][j]=0;
        }
    spawn rectrtri_upper(u_inv,0,0,X,Y,tmp_res);
    sync;
    free(tmp_res);
    return u_inv;

}


/***** Matrix multiplication of an upper triangular matrix with a full matrix *****/
cilk void mm_upper(double ** a1, int x_1, int y_1, double ** a2, int x_2, int y_2, double ** res, int x_3, int y_3, int M, int N, int P)
{
    int i,j,k;
    double sum=0;
    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            for (k=0; k<=j; k++) {
                sum=sum+a1[i+x_1][k+y_1]*a2[k+x_2][j+y_2];
            }
            up_res[i+x_3-M][j]=sum;
            sum=0;
        }
    }
    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            res[i+x_3][j+y_3]=up_res[i+x_3-M][j];
        }
    }
}

/***** Matrix multiplication of a lower triangular matrix with a full matrix *****/
cilk void mm_lower(double ** a1, int x_1, int y_1, double ** a2, int x_2, int y_2, double ** res, int x_3, int y_3, int M, int N, int P)
{
    int i,j,k;
    double sum=0;

    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            for (k=0; k<=i; k++) {
                sum=sum+a1[i+x_1][k+y_1]*a2[k+x_2][j+y_2];
            }
            low_res[i][j+y_3-P]=sum;
            sum=0;
        }
    }
    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            res[i+x_3][j+y_3]=low_res[i][j+y_3-P];
        }
    }
}


cilk void for_spawn_outter_mm_update(int start, int stop, \
            double ** a1, int x_1, int y_1, \
            double ** a2, int x_2, int y_2, \
            double ** res, int x_3, int y_3, \
            int M, int N, int P)
{
    int j, k;
    int current_range;
    double sum;
    current_range = stop - start;

    if(current_range > 0) {
        spawn for_spawn_outter_mm_update(start, start + current_range / 2,
                a1, x_1, y_1, a2, x_2, y_2, res, x_3, y_3, M, N, P);
        spawn for_spawn_outter_mm_update(start + current_range / 2 + 1, stop,
                a1, x_1, y_1, a2, x_2, y_2, res, x_3, y_3, M, N, P);
    }
    else if (current_range == 0) {
        for (j=0; j<P; j++) {
            sum=0;
            for (k=0; k<N; k++) {
                sum+=a1[start+x_1][k+y_1]*a2[k+x_2][j+y_2];
            }
            res[start+x_3][j+y_3]-=sum;
        }
    }
}

cilk void mm_update(double ** a1, int x_1, int y_1, double ** a2, int x_2, int y_2, double ** res, int x_3, int y_3, int M, int N, int P)
{
    spawn for_spawn_outter_mm_update(0, M-1, \
        a1, x_1, y_1, a2, x_2, y_2, res, x_3, y_3, M, N, P);
}

/***** Matrix multiplication: sign=0 --> res=a1*a2, sign=1 --> res=-a1*a2, op = 0 --> res=a1*a2, op = 1 --> res=res+a1*a2  *****/
void mm(double ** a1,int x_1,int y_1, double ** a2, int x_2, int y_2 , double ** res, int x_3, int y_3, double ** tmp_res, int M, int N, int P, int sign)
{
    int i,j,k;
    double sum=0;

    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            for (k=0; k<N; k++) {
                sum=sum+a1[i+x_1][k+y_1]*a2[k+x_2][j+y_2];
            }
            tmp_res[i+x_3][j+y_3]=sum;
            sum=0;
        }
    }

    for (i=0; i<M; i++) {
        for (j=0; j<P; j++) {
            for (k=0; k<N; k++) {
                sum=sum-a1[i+x_1][k+y_1]*a2[k+x_2][j+y_2];
            }
            tmp_res[i+x_3][j+y_3]=sum;
            sum=0;
        }
    }

    if (sign==0) {
        for (i=0; i<M; i++) {
            for (j=0; j<P; j++) {
                res[i+x_3][j+y_3]=tmp_res[i+x_3][j+y_3];
            }
        }
    } else if (sign==1) {
        for (i=0; i<M; i++) {
            for (j=0; j<P; j++) {
                res[i+x_3][j+y_3]=-tmp_res[i+x_3][j+y_3];
            }
        }
    }
}


/**** Recursive matrix inversion of a lower triangular matrix *****/
cilk void rectrtri_lower(double ** a, int x_s,int y_s, int N, int M, double ** tmp_res)
{
    int n,m;
    if (N==1 && M==1)
        a[x_s][y_s]=1.0/a[x_s][y_s];
    else {
        n=N/2;
        m=M/2;
        spawn rectrtri_lower(a,x_s,y_s,n,m, tmp_res);
        spawn rectrtri_lower(a,x_s+n,y_s+m,N-n,M-m, tmp_res);
        sync;
        mm(a,x_s+n,y_s,a,x_s,y_s,a,x_s+n,y_s,tmp_res,N-n,m,m,0);
        mm(a,x_s+n,y_s+m,a,x_s+n,y_s,a,x_s+n,y_s,tmp_res,N-n,M-m,m,1);
        
    }
}

/***** Recursive matrix inversion of an upper triangular matrix *****/
cilk void rectrtri_upper(double ** a, int x_s,int y_s, int N, int M, double ** tmp_res)
{
    int n,m;
    if (N==1 && M==1)
        a[x_s][y_s]=1.0/a[x_s][y_s];
    else {
        n=N/2;
        m=M/2;

        spawn rectrtri_upper(a,x_s,y_s,n,m, tmp_res);
        spawn rectrtri_upper(a,x_s+n,y_s+m,N-n,M-m, tmp_res);
        sync;
        mm(a,x_s,y_s+m,a,x_s+n,y_s+m,a,x_s,y_s+m,tmp_res,n,M-m,M-m,0);
        mm(a,x_s,y_s,a,x_s,y_s+m,a,x_s,y_s+m,tmp_res, n,m,M-m,1);
    }

}

double ** allocate(int X,int Y)
{
	double ** array;
	int i;
	array=(double**)calloc(X,sizeof(double*));
	for (i=0;i<X;i++)
		array[i]=(double*)calloc(Y,sizeof(double));
	return array;
}



